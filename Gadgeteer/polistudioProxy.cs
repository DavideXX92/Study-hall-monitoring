//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using System.Ext;
using System.Ext.Xml;
using Ws.ServiceModel;
using Ws.Services.Mtom;
using Ws.Services.Serialization;
using XmlElement = Ws.Services.Xml.WsXmlNode;
using XmlAttribute = Ws.Services.Xml.WsXmlAttribute;
using XmlConvert = Ws.Services.Serialization.WsXmlConvert;

namespace polistudio
{


    [DataContract(Namespace = "http://polistudio/")]
    public class login
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public string username;
        
        [DataMember(Order=1, IsNillable=true, IsRequired=false)]
        public string password;
    }
    
    public class loginDataContractSerializer : DataContractSerializer
    {
        
        public loginDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public loginDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            login loginField = null;
            if (IsParentStartElement(reader, false, true))
            {
                loginField = new login();
                reader.Read();
                if (IsChildStartElement(reader, "username", true, false))
                {
                    reader.Read();
                    loginField.username = reader.ReadString();
                    reader.ReadEndElement();
                }
                if (IsChildStartElement(reader, "password", true, false))
                {
                    reader.Read();
                    loginField.password = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return loginField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            login loginField = ((login)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "username", true, false, loginField.username))
                {
                    writer.WriteString(loginField.username);
                    writer.WriteEndElement();
                }
                if (WriteChildElement(writer, "password", true, false, loginField.password))
                {
                    writer.WriteString(loginField.password);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://polistudio/")]
    public class loginResponse
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public string loginResult;
    }
    
    public class loginResponseDataContractSerializer : DataContractSerializer
    {
        
        public loginResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public loginResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            loginResponse loginResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                loginResponseField = new loginResponse();
                reader.Read();
                if (IsChildStartElement(reader, "loginResult", true, false))
                {
                    reader.Read();
                    loginResponseField.loginResult = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return loginResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            loginResponse loginResponseField = ((loginResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "loginResult", true, false, loginResponseField.loginResult))
                {
                    writer.WriteString(loginResponseField.loginResult);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://polistudio/")]
    public class portRequest
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public string token;
    }
    
    public class portRequestDataContractSerializer : DataContractSerializer
    {
        
        public portRequestDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public portRequestDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            portRequest portRequestField = null;
            if (IsParentStartElement(reader, false, true))
            {
                portRequestField = new portRequest();
                reader.Read();
                if (IsChildStartElement(reader, "token", true, false))
                {
                    reader.Read();
                    portRequestField.token = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return portRequestField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            portRequest portRequestField = ((portRequest)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "token", true, false, portRequestField.token))
                {
                    writer.WriteString(portRequestField.token);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://polistudio/")]
    public class portRequestResponse
    {
        
        [DataMember(Order=0, IsRequired=false)]
        public int portRequestResult;
    }
    
    public class portRequestResponseDataContractSerializer : DataContractSerializer
    {
        
        public portRequestResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public portRequestResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            portRequestResponse portRequestResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                portRequestResponseField = new portRequestResponse();
                reader.Read();
                if (IsChildStartElement(reader, "portRequestResult", false, false))
                {
                    reader.Read();
                    portRequestResponseField.portRequestResult = XmlConvert.ToInt32(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return portRequestResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            portRequestResponse portRequestResponseField = ((portRequestResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "portRequestResult", false, false, portRequestResponseField.portRequestResult))
                {
                    writer.WriteString(XmlConvert.ToString(portRequestResponseField.portRequestResult));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://polistudio/")]
    public class logout
    {
        
        [DataMember(Order=0, IsNillable=true, IsRequired=false)]
        public string token;
    }
    
    public class logoutDataContractSerializer : DataContractSerializer
    {
        
        public logoutDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public logoutDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            logout logoutField = null;
            if (IsParentStartElement(reader, false, true))
            {
                logoutField = new logout();
                reader.Read();
                if (IsChildStartElement(reader, "token", true, false))
                {
                    reader.Read();
                    logoutField.token = reader.ReadString();
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return logoutField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            logout logoutField = ((logout)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "token", true, false, logoutField.token))
                {
                    writer.WriteString(logoutField.token);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [DataContract(Namespace = "http://polistudio/")]
    public class logoutResponse
    {
        
        [DataMember(Order=0, IsRequired=false)]
        public bool logoutResult;
    }
    
    public class logoutResponseDataContractSerializer : DataContractSerializer
    {
        
        public logoutResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public logoutResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            logoutResponse logoutResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                logoutResponseField = new logoutResponse();
                reader.Read();
                if (IsChildStartElement(reader, "logoutResult", false, false))
                {
                    reader.Read();
                    logoutResponseField.logoutResult = XmlConvert.ToBoolean(reader.ReadString());
                    reader.ReadEndElement();
                }
                reader.ReadEndElement();
            }
            return logoutResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            logoutResponse logoutResponseField = ((logoutResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                if (WriteChildElement(writer, "logoutResult", false, false, logoutResponseField.logoutResult))
                {
                    writer.WriteString(XmlConvert.ToString(logoutResponseField.logoutResult));
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            return;
        }
    }

    [ServiceContract(Namespace = "http://polistudio/")]
    [PolicyAssertion(Namespace="http://schemas.xmlsoap.org/ws/2004/09/policy", Name="All", PolicyID="BasicEndpoint_policy")]
    public interface IIService
    {

        [OperationContract(Action = "http://polistudio/IService/login")]
        loginResponse login(login req);
        
        [OperationContract(Action="http://polistudio/IService/portRequest")]
        portRequestResponse portRequest(portRequest req);
        
        [OperationContract(Action="http://polistudio/IService/logout")]
        logoutResponse logout(logout req);
    }
}
